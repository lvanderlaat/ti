#!/usr/bin/env python


"""
Extracts the spectra to be fitted from the raw waveforms (daily MSEED files).
"""


# Python Standard Library
import os

from itertools import repeat
from multiprocessing import Pool, cpu_count

# Other dependencies
import numpy as np
import obspy
import pandas as pd
import xarray as xr
import ti

from scipy.fft import rfft
from scipy.signal.windows import tukey


__author__ = 'Leonardo van der Laat'
__email__ = 'laat@umich.edu'


def work(
    filenames, wfs_dir, freqmin, freqmax, inventory, decimation_factor,
    window_length, overlap, window_pad, n_subwindows, npts, stachas
):
    n_channels = len(stachas)

    # Load data
    st = obspy.Stream()
    for filename in filenames:
        _st = obspy.read(os.path.join(wfs_dir, filename))
        tr = _st.merge(fill_value='interpolate')[0]
        tr.detrend()
        tr.filter('bandpass', freqmin=freqmin, freqmax=freqmax)
        tr.remove_sensitivity(inventory)
        tr.decimate(int(decimation_factor))
        st += tr

    # Make windows
    utcdatetimes, data_windowed = ti.obspy2numpy.st2windowed_data(
        st, window_length, overlap
    )
    if utcdatetimes is None:
        return None, None, None
    datetimes = [u.datetime for u in utcdatetimes]
    n_windows = data_windowed.shape[1]

    # Reshape
    Y = np.empty((n_channels, n_windows, n_subwindows, npts))
    Y[:] = np.nan
    for tr, _data_windowed in zip(st, data_windowed):
        idx = stachas.index((tr.stats.station, tr.stats.channel))
        Y[idx] = _data_windowed.reshape(n_windows, n_subwindows, npts)

    # Pad
    Y *= tukey(npts, alpha=window_pad)

    # FFT
    Sxx = np.abs(rfft(Y))

    # Median of subwindows
    Sxx = np.median(Sxx, axis=2)
    return datetimes[:n_windows], Sxx


def main():
    args = ti.utils.parse_args()

    c = ti.config.read(args.configfile)

    # Resampling rate
    m = c.source.sampling_rate % (2*c.model.max_freq)
    assert m == 0, 'sampling_rate % (2*max_freq) != 0.'
    resampling_rate = c.model.max_freq*2
    decimation_factor = int(c.source.sampling_rate/resampling_rate)

    # Frequency array
    n_subwindows = int(c.window.length / c.model.tau)
    npts = int(resampling_rate*c.model.tau)
    delta = 1/resampling_rate
    f = np.fft.rfftfreq(npts, delta)

    # Load channels
    channels = pd.read_csv(c.source.channels_csv, comment='/')
    stachas = list(zip(channels.station, channels.channel))

    # Get filenames
    df = ti.utils.scan_dir(c.source.wfs_dir)
    df = df[df.stacha.isin(stachas)]
    df = df[c.source.starttime:c.source.endtime]
    lists_of_files = [list(_df.filename) for _, _df in df.groupby('starttime')]

    # Read inventory
    inventory = obspy.read_inventory(c.source.inventory_file)

    # Process
    args_parallel = zip(
        lists_of_files, repeat(c.source.wfs_dir),
        repeat(c.preprocess.freqmin), repeat(c.preprocess.freqmax),
        repeat(inventory), repeat(decimation_factor),
        repeat(c.window.length), repeat(c.window.overlap),
        repeat(c.window.pad), repeat(n_subwindows), repeat(npts),
        repeat(stachas)
    )
    with Pool(cpu_count()) as pool:
        results = pool.starmap(work, args_parallel)
    _datetimes, _Sxx = list(map(list, zip(*results)))

    # Get rid of None results
    datetimes, Sxx = [], []
    for _d, _Sx in zip(_datetimes, _Sxx):
        if _d is None or _Sx is None:
            continue
        datetimes.extend(_d)
        Sxx.append(_Sx)
    Sxx = np.hstack(Sxx)

    # X-array
    print('Number of windows:', len(datetimes))
    data = xr.DataArray(
        Sxx,
        dims=('station', 't', 'f'),
        coords=dict(station=channels.station, t=datetimes, f=f)
    ).sel(t=slice(c.source.starttime, c.source.endtime))

    # Output
    folderpath = ti.utils.create_folder(c.io.output_dir, 'SSAM', c.io.overwrite)
    ti.utils.write_conf(c, folderpath)
    data.to_netcdf(os.path.join(folderpath, 'data.nc'))

    # Figures
    folderfigs = ti.utils.create_folder(folderpath, 'fig', True)
    for i, row in channels.iterrows():
        Sxx = data.sel(station=row.station).as_numpy()
        fig = ti.plot.ssam(data.t.values, data.f, Sxx.T.copy())
        fig.savefig(os.path.join(folderfigs, f'{row.station}.png'), dpi=250)
    return


if __name__ == '__main__':
    main()
