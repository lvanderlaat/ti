#!/usr/bin/env python


"""
Average station-independent optimization results.
"""


# Python Standard Library
import os

# Other dependencies
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import xarray as xr
import ti


__author__ = 'Leonardo van der Laat'
__email__ = 'laat@umich.edu'


filename_avg = 'param.csv'


def load_df(folderpath, filename):
    return pd.read_csv(
        os.path.join(folderpath, filename),
        parse_dates=True,
        index_col='datetime'
    )


def main():
    # Load configuration
    args = ti.utils.parse_args()
    c = ti.config.read(args.configfile)

    keys = [key for key, value in dict(c.model).items() if type(value) is list]

    channels = pd.read_csv(c.source.channels_csv, comment='/')

    data, dfs, Qf = [], [], []
    for i, row in channels.iterrows():
        print(row.station)

        _folderpath = os.path.join(c.io.output_dir, f'GA_{row.station}')

        df = load_df(_folderpath, filename_avg)[keys]
        Qf.append(df[['Qf']])
        dfs.append(df)
        t = df.index.tolist()
        data.append(df.values)

    Qf = pd.concat(Qf, axis=1)
    Qf.columns = channels.station

    data = np.array(data)

    data = xr.DataArray(
        data,
        dims=('station', 't', 'parameter'),
        coords=dict(station=channels.station, t=t, parameter=keys)
    )

    avg, std = [], []
    for key in keys:
        _data = data.sel(parameter=key)
        avg.append(_data.mean(axis=0))
        std.append(_data.std(axis=0))

    avg = pd.DataFrame(np.array(avg).T, index=t, columns=keys)
    std = pd.DataFrame(np.array(std).T, index=t, columns=keys)

    avg.drop(axis=1, labels='Qf', inplace=True)
    std.drop(axis=1, labels='Qf', inplace=True)

    avg.to_csv(os.path.join(c.io.output_dir, 'param_avg.csv'))
    std.to_csv(os.path.join(c.io.output_dir, 'param_std.csv'))
    Qf.to_csv(os.path.join(c.io.output_dir, 'param_Qf.csv'))

    mm = 1/25.6
    for key in keys:
        fig = plt.figure(figsize=(190*mm, 190*mm))
        ax = fig.add_subplot(111)
        for i, station in enumerate(channels.station):
            ax.plot(
                avg.index,
                dfs[i][key].rolling('6H', center=True).median(),
                lw=0.1
            )
        if key != 'Qf':
            ax.plot(avg[key], lw=2, c='k')
        ax.set_ylabel(key)
        fig.savefig(os.path.join(c.io.output_dir, key + '.png'), dpi=300)

    fig = ti.plot.moving_block(avg, std, c)
    fig.savefig(
        os.path.join(c.io.output_dir, 'param_timeseries_all_sta.png'),
        dpi=300
    )

    return


if __name__ == '__main__':
    main()
