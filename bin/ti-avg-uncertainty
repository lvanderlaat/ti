#!/usr/bin/env python


"""
"""


# Python Standard Library
import os

# Other dependencies
import numpy as np
import pandas as pd
import ti


__author__ = 'Leonardo van der Laat'
__email__ = 'laat@umich.edu'


def main():
    # Load configuration
    args = ti.utils.parse_args()
    c = ti.config.read(args.configfile)

    keys = [key for key, value in dict(c.model).items() if type(value) is list]

    channels = pd.read_csv(c.source.channels_csv, comment='/')
    channels['distance'] = np.sqrt(
        (channels.x - c.model.xs)**2 +
        (channels.y - c.model.ys)**2 +
        (channels.z - c.model.zs)**2
    )
    channels.sort_values(by='distance', inplace=True, ignore_index=True)

    dfs = []
    # fnat = []
    for i, row in channels.iterrows():
        folderpath = os.path.join(c.io.output_dir, f'GA_MULTI_{row.station}')
        dfs.append(pd.read_csv(os.path.join(folderpath, 'params.csv'))[keys])
        # fnat.append(pd.read_csv(os.path.join(folderpath, 'fnat.csv')))
    # fig = ti.plot.fnat_violinplot(fnat, channels)
    # fig.savefig(os.path.join(c.io.output_dir, 'fnat.png'), dpi=250)

    fig = ti.plot.violinplot(dfs, keys, channels, c.model)
    fig.savefig(
        os.path.join(c.io.output_dir, 'violinplot_violinplot.png'), dpi=250
    )

    data = {}
    for i, key in enumerate(keys):
        _data = np.array(
            [dfs[j][key] for j, _ in channels.iterrows()]
        )
        data[key] = _data.flatten()

        _data = np.median(_data, axis=1)
        lognorm = False
        if key in ti.constants.log_params:
            lognorm = True
        fig = ti.plot.map(key, _data, channels, lognorm=lognorm)
        fig.savefig(os.path.join(c.io.output_dir, f'map_{key}.png'), dpi=250)

    df = pd.DataFrame(data)
    p = ti.parameters.as_dict()
    for column in df.columns:
        df[column] = df[column] * p[column]['conversion']
    df = df.describe(percentiles=[])
    df = df.drop(columns='Qf')
    df.columns = [
        ti.parameters.get_parameter_label(key) for key in keys if key != 'Qf'
    ]
    df = df.drop(index='count')
    df.index = ['Mean', 'Standard deviation', 'Minimum', 'Median', 'Maximum']

    latex_code = df.style.to_latex(
        position='!htb',
        position_float='centering',
        hrules=True,
        label='tab:mean_station',
        caption='Source parameters results accross stations',
        siunitx=True,
    )
    for _rule in 'toprule midrule bottomrule'.split():
        latex_code = latex_code.replace(_rule, 'hline')

    with open(os.path.join(c.io.output_dir, 'params_mean.tex'), 'w') as f:
        f.write(latex_code)

    return


if __name__ == '__main__':
    main()
